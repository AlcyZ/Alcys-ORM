{"name":"Alcys-orm","tagline":"Ein PHP-ORM System, Test Driven Entwickelt, 96% Code-Coverage und inklusive API Dokumentation.","body":"Alcys-ORM\r\n=========\r\nEin PHP-ORM System, Test Driven Entwickelt, 96% Code-Coverage und inklusive API Dokumentation.\r\nMomentant wird nur MySql unterstützt!\r\n\r\nEinbindung\r\n----------\r\nMan kann einfach den Autoloader bzw. jeden anderen PSR-0 kompatiblen Autoloader benutzen und ihn registrieren.\r\n\r\n```php\r\n<?php\r\nrequire_once 'Autoloader.php';\r\n\r\nspl_autoload_register(\r\n\tarray('Autoloader', 'load')\r\n);\r\n\r\nAutoloader::register('src/');\r\n```\r\nEine etwas genauere Beschreibung folgt wenn ich die Zeit dafür finde. Außerdem bietet sie aktuell \r\n(in der ersten Stabilen Version) noch nicht viel Extra-Funktionalitäten. Trotzdem sollte der Funkionsumfang\r\nschon für die meisten Projekte reichen, sofern nicht zu komplexe MySql-Querys benötigt werden.\r\n\r\nBenutzung\r\n---------\r\nMan kann sich einfach ein Objekt der Klasse Alcys\\Core\\Db\\Service\\AlcysDb instantiieren. Es verfügt über Methoden,\r\ndie Objekte zur Ausführung von SELECT, UPDATE, INSERT und DELETE Statements zurückgeben.\r\n```php\r\n$db = new Alcys\\Core\\Db\\Service\\AlcysDb('mysql:host=localhost;dbname=db_name', 'db_user', 'db_password')\r\n\r\n$select = $db->select('table_name'); # Object for select statements\r\n$update = $db->update('table_name'); # Object for update statements\r\n$insert = $db->insert('table_name'); # Object for insert statements\r\n$delete = $db->delete('table_name'); # Object for delete statements\r\n```\r\n\r\nJedes dieser Objekte verfügt über Methoden um den Query Objekt-Orientiert zu erzeugen. Um den Befehl auszuführen, stehen\r\nfolgende Methoden zur Verfügung:\r\n```php\r\n$select->fetch();\r\n$update->execute();\r\n$insert->execute();\r\n$delete->execute();\r\n```\r\n\r\nEs wird immer der Tabellenname genommen, der im Constructor übergeben worden ist. Zusätzliche Tabellen können mithilfe \r\nder table() Methode gesetzt werden.\r\nBei einem Select Befehl sind, falls nicht anders mit Hilfe der column() Methode gesetzt, alle Spalten (\\*) gewählt.\r\n\r\nBeispiele\r\n---------\r\nSimpler Select Befehl:\r\n```php\r\n# SELECT `test_column`, `column` AS `clm` FROM `test_table` AS `my_table` ORDER BY `clm` DESC;\r\n$select = $db->select(`test_table`, `my_table`);\r\n\r\n$resultArray = $select->column('test_column')\r\n\t\t\t\t\t  ->column('column', 'clm')\r\n\t\t\t\t\t  ->orderBy('clm', 'desc')\r\n\t\t\t\t\t  ->fetch();\r\n```\r\n\r\nSimpler Update Befehl:\r\n```php\r\n# UPDATE `test_table` SET `column` = \"value\", `clm` = \"val\" LIMIT 4, 15;\r\n$update = $db->update(`test_table`);\r\n\r\n$update->column('column')->value('value')\r\n       ->column('clm')->value('val')\r\n       ->limit('4', '15')\r\n       ->execute();\r\n```\r\n\r\nSimpler Insert Befehl:\r\n```php\r\n# INSERT INTO `test_table` (`column`, `clm`) VALUES (\"val\", \"value\"), (\"any_value\", \"this_value\");\r\n$insert = $db->insert(`test_table`);\r\n\r\n$insert->columns(array('column', 'clm'))\r\n       ->values(array('val', 'value'))\r\n       ->values(array('any_value', 'this_value'))\r\n       ->execute();\r\n```\r\n\r\nSimpler Delete Befehl:\r\n```php\r\n# DELETE FROM `test_table` ORDER BY `column` ASC LIMIT 0, 5;\r\n$delete = $db->delete(`test_table`);\r\n\r\n$delete->orderBy('column')\r\n       ->limit('0', '5')\r\n       ->execute();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}