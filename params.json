{"name":"Alcys-orm","tagline":"Ein PHP-ORM System, Test Driven Entwickelt, 100% Code-Coverage und inklusive API Dokumentation.","body":"Alcys-ORM\r\n=========\r\nA test driven developed PHP-ORM system, 100Â½ code coverage with API documentation.\r\nActually, i only support MySql, but other driver will follow.\r\n\r\n\r\nInstallation\r\n------------\r\nDownload and extract the zip package. Copy the src/ directory to your project and use\r\na PSR-0 or PSR-4 autoloader to require the files. In the package root directory exist a\r\nsmall and simple PSR-0 autoloader, which also could used.\r\n```php\r\n<?php\r\nrequire_once 'Autoloader.php';\r\n\r\nspl_autoload_register(\r\n    array('Autoloader', 'load');\r\n);\r\n\r\nAutoloader::register('src/');\r\n```\r\n\r\nUsage\r\n-----\r\nInstantiate an object of the class Alcys\\Core\\Db\\Service\\AlcysDb. There are some methods\r\nto create whether SELECT, INSERT, DELETE or UPDATE statement objects which communicate with the database.\r\n```php\r\n$db = new Alcys\\Core\\Db\\Service\\AlcysDb('mysql:host=localhost;dbname=db_name', 'db_user', 'db_password');\r\n\r\n$select = $db->select('table_name'); # Object for select statements\r\n$update = $db->update('table_name'); # Object for update statements\r\n$insert = $db->insert('table_name'); # Object for insert statements\r\n$delete = $db->delete('table_name'); # Object for delete statements\r\n```\r\n\r\nThe table name is required to pass it as argument through the create method. To add other tables, \r\nsimple use the table() method which exists in each statement object.\r\nIf the columns method, which only not exist in the delete statement, will not called, a wildcard (\\*) will \r\nadd for the columns.\r\n\r\nExamples\r\n--------\r\nSimple select query:\r\n```php\r\n# SELECT `test_column`, `column` AS `clm` FROM `test_table` AS `my_table` ORDER BY `clm` DESC;\r\n$select = $db->select(`test_table`, `my_table`);\r\n\r\n$resultArray = $select->column('test_column')\r\n\t\t\t\t\t  ->column('column', 'clm')\r\n\t\t\t\t\t  ->orderBy('clm', 'desc')\r\n\t\t\t\t\t  ->fetch();\r\n```\r\n\r\nSimple update query:\r\n```php\r\n# UPDATE `test_table` SET `column` = \"value\", `clm` = \"val\" LIMIT 4, 15;\r\n$update = $db->update(`test_table`);\r\n\r\n$update->column('column')->value('value')\r\n       ->column('clm')->value('val')\r\n       ->limit('4', '15')\r\n       ->execute();\r\n```\r\n\r\nSimple insert query:\r\n```php\r\n# INSERT INTO `test_table` (`column`, `clm`) VALUES (\"val\", \"value\"), (\"any_value\", \"this_value\");\r\n$insert = $db->insert(`test_table`);\r\n\r\n$insert->columns(array('column', 'clm'))\r\n       ->values(array('val', 'value'))\r\n       ->values(array('any_value', 'this_value'))\r\n       ->execute();\r\n```\r\n\r\nSimple delete query:\r\n```php\r\n# DELETE FROM `test_table` ORDER BY `column` ASC LIMIT 0, 5;\r\n$delete = $db->delete(`test_table`);\r\n\r\n$delete->orderBy('column')\r\n       ->limit('0', '5')\r\n       ->execute();\r\n```\r\n\r\nWhere-Conditions\r\n----------------\r\nAll statement objects, instead of the InsertStatement, have a 'condition' method which return an object\r\nfor the creation of conditions. After call some methods of the object to build the condition, pass it to\r\nthe 'where' method.\r\n```php\r\n# WHERE `column_name` != 'value'\r\n\r\n$delete->where($delete->condition()->notEqual('column_name', 'value'));\r\n```\r\n\r\nIf you want to compare two columns, pass as third argument the string 'column'.\r\n```php\r\n# WHERE `first_column` >= `second_column`\r\n\r\n$update->where($update->condition()->greaterEqual('first_column, 'second_column', 'column');\r\n```\r\n\r\nTo connect multiple conditions, you have to invoke the methods 'logicAnd' and 'logicOr' between\r\nthe other condition methods.\r\nIf they not called between conditions, an exception will thrown.\r\n```php\r\n# WHERE `first_column` = 'a' AND `cl` != `clm` OR `column` < 5\r\n\r\n$condition = $select->condition();\r\n$condition->equal('first_column', 'a')->logicAnd()->notEqual('cl', 'clm', 'column')->logicOr()->lower('column', 5);\r\n\r\n$select->where($condition)->fetch();\r\n```\r\n\r\nLike conditions will follow ..\r\n\r\nJoins\r\n-----\r\nAt the current version, joins are only implemented in the select statement. The functionality is implemented for other\r\nstatements in the next version.\r\n\r\nThe method 'joinBuilder' returns an object for the creation of the join expression. This have to pass to the statements \r\n'join' method.\r\n```php\r\n# LEFT JOIN `table_name` USING `column`\r\n\r\n$select->join($select->joinBuilder()->left('table_name')->using('column'));\r\n```\r\n\r\nThe arguments for the 'on' method has to be two assoc arrays with keys 'table' and 'column'.\r\nIf the arrays are invalid, an exception will thrown.\r\n```php\r\n# INNER JOIN `table` ON (`tbl`.`cl`, `table`.`clm`);\r\n\r\n$firstColumn = array('table' => 'tbl', 'column' => 'cl');\r\n$secondColumn = array('table' => 'table', 'column' => 'clm');\r\n\r\n$select->join($select->joinBuilder()->inner('table')->on($firstColumn, $secondColumn));\r\n\r\n```\r\n\r\nBefore calling the 'on' or 'using' method, you have to invoke whether the 'inner', 'left[Outer]' or 'right[Outer]' method,\r\notherwise an exception will thrown.\r\n\r\nIf you want to join a table with all equivalent column names, you can use the 'natural' method.\r\nThe first argument is the table name, the optional second can be whether 'inner', 'left[Outer]' or 'right[Outer].\r\n```php\r\n# NATURAL JOIN `table`\r\n$select->join($select->joinBuilder()->natural('table'));\r\n\r\n# NATURAL RIGHT JOIN `table`\r\n$select->join($select->joinBuilder()->natural('table', 'right'));\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}